// Generated by rstantools.  Do not edit by hand.

/*
    dynamicimpact is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    dynamicimpact is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with dynamicimpact.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_model_vector_full_spatial_predict_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_model_vector_full_spatial_predict");
    reader.add_event(180, 178, "end", "model_model_vector_full_spatial_predict");
    return reader;
}
template <typename T0__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1> >
cumsum_vector(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& input_vector, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 19;
        int N_SIZE(0);
        (void) N_SIZE;  // dummy to suppress unused var warning
        stan::math::fill(N_SIZE, std::numeric_limits<int>::min());
        stan::math::assign(N_SIZE,get_base1(dims(input_vector), 1, "dims(input_vector)", 1));
        current_statement_begin__ = 21;
        validate_non_negative_index("result_vector", "get_base1(dims(input_vector), 2, \"dims(input_vector)\", 1)", get_base1(dims(input_vector), 2, "dims(input_vector)", 1));
        validate_non_negative_index("result_vector", "N_SIZE", N_SIZE);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > result_vector(N_SIZE, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(get_base1(dims(input_vector), 2, "dims(input_vector)", 1)));
        stan::math::initialize(result_vector, DUMMY_VAR__);
        stan::math::fill(result_vector, DUMMY_VAR__);
        current_statement_begin__ = 23;
        stan::model::assign(result_vector, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    get_base1(input_vector, 1, "input_vector", 1), 
                    "assigning variable result_vector");
        current_statement_begin__ = 25;
        for (int t = 2; t <= N_SIZE; ++t) {
            current_statement_begin__ = 26;
            stan::model::assign(result_vector, 
                        stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                        add(get_base1(result_vector, (t - 1), "result_vector", 1), get_base1(input_vector, t, "input_vector", 1)), 
                        "assigning variable result_vector");
        }
        current_statement_begin__ = 29;
        return stan::math::promote_scalar<fun_return_scalar_t__>(result_vector);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct cumsum_vector_functor__ {
    template <typename T0__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1> >
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& input_vector, std::ostream* pstream__) const {
        return cumsum_vector(input_vector, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_model_vector_full_spatial_predict
  : public stan::model::model_base_crtp<model_model_vector_full_spatial_predict> {
private:
        int N;
        int N_before;
        int K;
        int P;
        int J;
        std::vector<vector_d> Y;
        std::vector<vector_d> X;
        std::vector<vector_d> COORDINATES;
        double coordinates_lower;
        double coordinates_upper;
        int use_predefined_stations_var;
        matrix_d predefined_stations_var;
        int N_after;
public:
    model_model_vector_full_spatial_predict(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_model_vector_full_spatial_predict(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_model_vector_full_spatial_predict_namespace::model_model_vector_full_spatial_predict";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 38;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "N_before", "int", context__.to_vec());
            N_before = int(0);
            vals_i__ = context__.vals_i("N_before");
            pos__ = 0;
            N_before = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_before", N_before, 0);
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "P", "int", context__.to_vec());
            P = int(0);
            vals_i__ = context__.vals_i("P");
            pos__ = 0;
            P = vals_i__[pos__++];
            check_greater_or_equal(function__, "P", P, 0);
            current_statement_begin__ = 43;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            check_greater_or_equal(function__, "J", J, 1);
            current_statement_begin__ = 45;
            validate_non_negative_index("Y", "K", K);
            validate_non_negative_index("Y", "N", N);
            context__.validate_dims("data initialization", "Y", "vector_d", context__.to_vec(N,K));
            Y = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            vals_r__ = context__.vals_r("Y");
            pos__ = 0;
            size_t Y_j_1_max__ = K;
            size_t Y_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < Y_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < Y_k_0_max__; ++k_0__) {
                    Y[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 46;
            validate_non_negative_index("X", "P", P);
            validate_non_negative_index("X", "N", N);
            context__.validate_dims("data initialization", "X", "vector_d", context__.to_vec(N,P));
            X = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(P));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_1_max__ = P;
            size_t X_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < X_k_0_max__; ++k_0__) {
                    X[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 48;
            validate_non_negative_index("COORDINATES", "2", 2);
            validate_non_negative_index("COORDINATES", "K", K);
            context__.validate_dims("data initialization", "COORDINATES", "vector_d", context__.to_vec(K,2));
            COORDINATES = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(K, Eigen::Matrix<double, Eigen::Dynamic, 1>(2));
            vals_r__ = context__.vals_r("COORDINATES");
            pos__ = 0;
            size_t COORDINATES_j_1_max__ = 2;
            size_t COORDINATES_k_0_max__ = K;
            for (size_t j_1__ = 0; j_1__ < COORDINATES_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < COORDINATES_k_0_max__; ++k_0__) {
                    COORDINATES[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 50;
            context__.validate_dims("data initialization", "coordinates_lower", "double", context__.to_vec());
            coordinates_lower = double(0);
            vals_r__ = context__.vals_r("coordinates_lower");
            pos__ = 0;
            coordinates_lower = vals_r__[pos__++];
            current_statement_begin__ = 51;
            context__.validate_dims("data initialization", "coordinates_upper", "double", context__.to_vec());
            coordinates_upper = double(0);
            vals_r__ = context__.vals_r("coordinates_upper");
            pos__ = 0;
            coordinates_upper = vals_r__[pos__++];
            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "use_predefined_stations_var", "int", context__.to_vec());
            use_predefined_stations_var = int(0);
            vals_i__ = context__.vals_i("use_predefined_stations_var");
            pos__ = 0;
            use_predefined_stations_var = vals_i__[pos__++];
            check_greater_or_equal(function__, "use_predefined_stations_var", use_predefined_stations_var, 0);
            check_less_or_equal(function__, "use_predefined_stations_var", use_predefined_stations_var, 1);
            current_statement_begin__ = 54;
            validate_non_negative_index("predefined_stations_var", "K", K);
            validate_non_negative_index("predefined_stations_var", "K", K);
            context__.validate_dims("data initialization", "predefined_stations_var", "matrix_d", context__.to_vec(K,K));
            predefined_stations_var = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(K, K);
            vals_r__ = context__.vals_r("predefined_stations_var");
            pos__ = 0;
            size_t predefined_stations_var_j_2_max__ = K;
            size_t predefined_stations_var_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < predefined_stations_var_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < predefined_stations_var_j_1_max__; ++j_1__) {
                    predefined_stations_var(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            current_statement_begin__ = 62;
            N_after = int(0);
            stan::math::fill(N_after, std::numeric_limits<int>::min());
            stan::math::assign(N_after,(N - N_before));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 69;
            validate_non_negative_index("sigma_entry_obs_stations", "(use_predefined_stations_var ? 0 : K )", (use_predefined_stations_var ? 0 : K ));
            validate_non_negative_index("sigma_entry_obs_stations", "(use_predefined_stations_var ? 0 : K )", (use_predefined_stations_var ? 0 : K ));
            num_params_r__ += ((use_predefined_stations_var ? 0 : K ) + (((use_predefined_stations_var ? 0 : K ) * ((use_predefined_stations_var ? 0 : K ) - 1)) / 2));
            current_statement_begin__ = 71;
            validate_non_negative_index("theta_vec", "(P * K)", (P * K));
            validate_non_negative_index("theta_vec", "J", J);
            validate_non_negative_index("theta_vec", "N_before", N_before);
            num_params_r__ += (((P * K) * J) * N_before);
            current_statement_begin__ = 73;
            validate_non_negative_index("theta_vec_cov_matrix", "(P * K)", (P * K));
            validate_non_negative_index("theta_vec_cov_matrix", "(P * K)", (P * K));
            num_params_r__ += ((P * K) + (((P * K) * ((P * K) - 1)) / 2));
            current_statement_begin__ = 75;
            validate_non_negative_index("kernels", "2", 2);
            validate_non_negative_index("kernels", "J", J);
            num_params_r__ += (2 * J);
            current_statement_begin__ = 77;
            validate_non_negative_index("sigma_kernels", "2", 2);
            validate_non_negative_index("sigma_kernels", "2", 2);
            num_params_r__ += (2 + ((2 * (2 - 1)) / 2));
            current_statement_begin__ = 79;
            validate_non_negative_index("theta_vec_no_espatial", "(P * K)", (P * K));
            validate_non_negative_index("theta_vec_no_espatial", "N_before", N_before);
            num_params_r__ += ((P * K) * N_before);
            current_statement_begin__ = 80;
            validate_non_negative_index("theta_vec_cov_matrix_no_spatial", "(P * K)", (P * K));
            validate_non_negative_index("theta_vec_cov_matrix_no_spatial", "(P * K)", (P * K));
            num_params_r__ += ((P * K) + (((P * K) * ((P * K) - 1)) / 2));
            current_statement_begin__ = 82;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_model_vector_full_spatial_predict() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 69;
        if (!(context__.contains_r("sigma_entry_obs_stations")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_entry_obs_stations missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_entry_obs_stations");
        pos__ = 0U;
        validate_non_negative_index("sigma_entry_obs_stations", "(use_predefined_stations_var ? 0 : K )", (use_predefined_stations_var ? 0 : K ));
        validate_non_negative_index("sigma_entry_obs_stations", "(use_predefined_stations_var ? 0 : K )", (use_predefined_stations_var ? 0 : K ));
        context__.validate_dims("parameter initialization", "sigma_entry_obs_stations", "matrix_d", context__.to_vec((use_predefined_stations_var ? 0 : K ),(use_predefined_stations_var ? 0 : K )));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> sigma_entry_obs_stations((use_predefined_stations_var ? 0 : K ), (use_predefined_stations_var ? 0 : K ));
        size_t sigma_entry_obs_stations_j_2_max__ = (use_predefined_stations_var ? 0 : K );
        size_t sigma_entry_obs_stations_j_1_max__ = (use_predefined_stations_var ? 0 : K );
        for (size_t j_2__ = 0; j_2__ < sigma_entry_obs_stations_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_entry_obs_stations_j_1_max__; ++j_1__) {
                sigma_entry_obs_stations(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cov_matrix_unconstrain(sigma_entry_obs_stations);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_entry_obs_stations: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 71;
        if (!(context__.contains_r("theta_vec")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_vec missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_vec");
        pos__ = 0U;
        validate_non_negative_index("theta_vec", "(P * K)", (P * K));
        validate_non_negative_index("theta_vec", "J", J);
        validate_non_negative_index("theta_vec", "N_before", N_before);
        context__.validate_dims("parameter initialization", "theta_vec", "vector_d", context__.to_vec(J,N_before,(P * K)));
        std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > theta_vec(J, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N_before, Eigen::Matrix<double, Eigen::Dynamic, 1>((P * K))));
        size_t theta_vec_j_1_max__ = (P * K);
        size_t theta_vec_k_0_max__ = J;
        size_t theta_vec_k_1_max__ = N_before;
        for (size_t j_1__ = 0; j_1__ < theta_vec_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < theta_vec_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < theta_vec_k_0_max__; ++k_0__) {
                    theta_vec[k_0__][k_1__](j_1__) = vals_r__[pos__++];
                }
            }
        }
        size_t theta_vec_i_0_max__ = J;
        size_t theta_vec_i_1_max__ = N_before;
        for (size_t i_0__ = 0; i_0__ < theta_vec_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < theta_vec_i_1_max__; ++i_1__) {
                try {
                    writer__.vector_unconstrain(theta_vec[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_vec: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 73;
        if (!(context__.contains_r("theta_vec_cov_matrix")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_vec_cov_matrix missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_vec_cov_matrix");
        pos__ = 0U;
        validate_non_negative_index("theta_vec_cov_matrix", "(P * K)", (P * K));
        validate_non_negative_index("theta_vec_cov_matrix", "(P * K)", (P * K));
        context__.validate_dims("parameter initialization", "theta_vec_cov_matrix", "matrix_d", context__.to_vec((P * K),(P * K)));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> theta_vec_cov_matrix((P * K), (P * K));
        size_t theta_vec_cov_matrix_j_2_max__ = (P * K);
        size_t theta_vec_cov_matrix_j_1_max__ = (P * K);
        for (size_t j_2__ = 0; j_2__ < theta_vec_cov_matrix_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_vec_cov_matrix_j_1_max__; ++j_1__) {
                theta_vec_cov_matrix(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cov_matrix_unconstrain(theta_vec_cov_matrix);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_vec_cov_matrix: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 75;
        if (!(context__.contains_r("kernels")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable kernels missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("kernels");
        pos__ = 0U;
        validate_non_negative_index("kernels", "2", 2);
        validate_non_negative_index("kernels", "J", J);
        context__.validate_dims("parameter initialization", "kernels", "vector_d", context__.to_vec(J,2));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > kernels(J, Eigen::Matrix<double, Eigen::Dynamic, 1>(2));
        size_t kernels_j_1_max__ = 2;
        size_t kernels_k_0_max__ = J;
        for (size_t j_1__ = 0; j_1__ < kernels_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < kernels_k_0_max__; ++k_0__) {
                kernels[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t kernels_i_0_max__ = J;
        for (size_t i_0__ = 0; i_0__ < kernels_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lub_unconstrain(coordinates_lower, coordinates_upper, kernels[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable kernels: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 77;
        if (!(context__.contains_r("sigma_kernels")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_kernels missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_kernels");
        pos__ = 0U;
        validate_non_negative_index("sigma_kernels", "2", 2);
        validate_non_negative_index("sigma_kernels", "2", 2);
        context__.validate_dims("parameter initialization", "sigma_kernels", "matrix_d", context__.to_vec(2,2));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> sigma_kernels(2, 2);
        size_t sigma_kernels_j_2_max__ = 2;
        size_t sigma_kernels_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < sigma_kernels_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_kernels_j_1_max__; ++j_1__) {
                sigma_kernels(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cov_matrix_unconstrain(sigma_kernels);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_kernels: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 79;
        if (!(context__.contains_r("theta_vec_no_espatial")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_vec_no_espatial missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_vec_no_espatial");
        pos__ = 0U;
        validate_non_negative_index("theta_vec_no_espatial", "(P * K)", (P * K));
        validate_non_negative_index("theta_vec_no_espatial", "N_before", N_before);
        context__.validate_dims("parameter initialization", "theta_vec_no_espatial", "vector_d", context__.to_vec(N_before,(P * K)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > theta_vec_no_espatial(N_before, Eigen::Matrix<double, Eigen::Dynamic, 1>((P * K)));
        size_t theta_vec_no_espatial_j_1_max__ = (P * K);
        size_t theta_vec_no_espatial_k_0_max__ = N_before;
        for (size_t j_1__ = 0; j_1__ < theta_vec_no_espatial_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < theta_vec_no_espatial_k_0_max__; ++k_0__) {
                theta_vec_no_espatial[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t theta_vec_no_espatial_i_0_max__ = N_before;
        for (size_t i_0__ = 0; i_0__ < theta_vec_no_espatial_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(theta_vec_no_espatial[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_vec_no_espatial: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 80;
        if (!(context__.contains_r("theta_vec_cov_matrix_no_spatial")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_vec_cov_matrix_no_spatial missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_vec_cov_matrix_no_spatial");
        pos__ = 0U;
        validate_non_negative_index("theta_vec_cov_matrix_no_spatial", "(P * K)", (P * K));
        validate_non_negative_index("theta_vec_cov_matrix_no_spatial", "(P * K)", (P * K));
        context__.validate_dims("parameter initialization", "theta_vec_cov_matrix_no_spatial", "matrix_d", context__.to_vec((P * K),(P * K)));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> theta_vec_cov_matrix_no_spatial((P * K), (P * K));
        size_t theta_vec_cov_matrix_no_spatial_j_2_max__ = (P * K);
        size_t theta_vec_cov_matrix_no_spatial_j_1_max__ = (P * K);
        for (size_t j_2__ = 0; j_2__ < theta_vec_cov_matrix_no_spatial_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_vec_cov_matrix_no_spatial_j_1_max__; ++j_1__) {
                theta_vec_cov_matrix_no_spatial(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cov_matrix_unconstrain(theta_vec_cov_matrix_no_spatial);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_vec_cov_matrix_no_spatial: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 82;
        if (!(context__.contains_r("scale_spatial_param")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable scale_spatial_param missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("scale_spatial_param");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "scale_spatial_param", "double", context__.to_vec());
        double scale_spatial_param(0);
        scale_spatial_param = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(scale_spatial_param);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable scale_spatial_param: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 69;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> sigma_entry_obs_stations;
            (void) sigma_entry_obs_stations;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_entry_obs_stations = in__.cov_matrix_constrain((use_predefined_stations_var ? 0 : K ), lp__);
            else
                sigma_entry_obs_stations = in__.cov_matrix_constrain((use_predefined_stations_var ? 0 : K ));
            current_statement_begin__ = 71;
            std::vector<std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > > theta_vec;
            size_t theta_vec_d_0_max__ = J;
            size_t theta_vec_d_1_max__ = N_before;
            theta_vec.resize(theta_vec_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < theta_vec_d_0_max__; ++d_0__) {
                theta_vec[d_0__].reserve(theta_vec_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < theta_vec_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        theta_vec[d_0__].push_back(in__.vector_constrain((P * K), lp__));
                    else
                        theta_vec[d_0__].push_back(in__.vector_constrain((P * K)));
                }
            }
            current_statement_begin__ = 73;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> theta_vec_cov_matrix;
            (void) theta_vec_cov_matrix;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_vec_cov_matrix = in__.cov_matrix_constrain((P * K), lp__);
            else
                theta_vec_cov_matrix = in__.cov_matrix_constrain((P * K));
            current_statement_begin__ = 75;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > kernels;
            size_t kernels_d_0_max__ = J;
            kernels.reserve(kernels_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < kernels_d_0_max__; ++d_0__) {
                if (jacobian__)
                    kernels.push_back(in__.vector_lub_constrain(coordinates_lower, coordinates_upper, 2, lp__));
                else
                    kernels.push_back(in__.vector_lub_constrain(coordinates_lower, coordinates_upper, 2));
            }
            current_statement_begin__ = 77;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> sigma_kernels;
            (void) sigma_kernels;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_kernels = in__.cov_matrix_constrain(2, lp__);
            else
                sigma_kernels = in__.cov_matrix_constrain(2);
            current_statement_begin__ = 79;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > theta_vec_no_espatial;
            size_t theta_vec_no_espatial_d_0_max__ = N_before;
            theta_vec_no_espatial.reserve(theta_vec_no_espatial_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < theta_vec_no_espatial_d_0_max__; ++d_0__) {
                if (jacobian__)
                    theta_vec_no_espatial.push_back(in__.vector_constrain((P * K), lp__));
                else
                    theta_vec_no_espatial.push_back(in__.vector_constrain((P * K)));
            }
            current_statement_begin__ = 80;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> theta_vec_cov_matrix_no_spatial;
            (void) theta_vec_cov_matrix_no_spatial;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_vec_cov_matrix_no_spatial = in__.cov_matrix_constrain((P * K), lp__);
            else
                theta_vec_cov_matrix_no_spatial = in__.cov_matrix_constrain((P * K));
            current_statement_begin__ = 82;
            local_scalar_t__ scale_spatial_param;
            (void) scale_spatial_param;  // dummy to suppress unused var warning
            if (jacobian__)
                scale_spatial_param = in__.scalar_constrain(lp__);
            else
                scale_spatial_param = in__.scalar_constrain();
            // transformed parameters
            current_statement_begin__ = 88;
            validate_non_negative_index("pi_mixture", "K", K);
            validate_non_negative_index("pi_mixture", "J", J);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > pi_mixture(J, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(K));
            stan::math::initialize(pi_mixture, DUMMY_VAR__);
            stan::math::fill(pi_mixture, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 93;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 95;
                for (int k = 1; k <= K; ++k) {
                    current_statement_begin__ = 97;
                    stan::model::assign(pi_mixture, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                                stan::math::exp(multi_normal_log(get_base1(COORDINATES, k, "COORDINATES", 1), get_base1(kernels, j, "kernels", 1), sigma_kernels)), 
                                "assigning variable pi_mixture");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 88;
            size_t pi_mixture_k_0_max__ = J;
            size_t pi_mixture_j_1_max__ = K;
            for (size_t k_0__ = 0; k_0__ < pi_mixture_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < pi_mixture_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(pi_mixture[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: pi_mixture" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable pi_mixture: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma_entry_obs_stations");
        names__.push_back("theta_vec");
        names__.push_back("theta_vec_cov_matrix");
        names__.push_back("kernels");
        names__.push_back("sigma_kernels");
        names__.push_back("theta_vec_no_espatial");
        names__.push_back("theta_vec_cov_matrix_no_spatial");
        names__.push_back("scale_spatial_param");
        names__.push_back("pi_mixture");
        names__.push_back("Y_pred");
        names__.push_back("theta_vec_pred");
        names__.push_back("theta_vec_pred_no_spatial");
        names__.push_back("mu");
        names__.push_back("difference");
        names__.push_back("cumsum_difference");
        names__.push_back("cumsum_only_after");
        names__.push_back("arco_only_after");
        names__.push_back("arco_only_after_aggregated");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((use_predefined_stations_var ? 0 : K ));
        dims__.push_back((use_predefined_stations_var ? 0 : K ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dims__.push_back(N_before);
        dims__.push_back((P * K));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((P * K));
        dims__.push_back((P * K));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_before);
        dims__.push_back((P * K));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((P * K));
        dims__.push_back((P * K));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dims__.push_back(N);
        dims__.push_back((K * P));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back((K * P));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_model_vector_full_spatial_predict_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> sigma_entry_obs_stations = in__.cov_matrix_constrain((use_predefined_stations_var ? 0 : K ));
        size_t sigma_entry_obs_stations_j_2_max__ = (use_predefined_stations_var ? 0 : K );
        size_t sigma_entry_obs_stations_j_1_max__ = (use_predefined_stations_var ? 0 : K );
        for (size_t j_2__ = 0; j_2__ < sigma_entry_obs_stations_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_entry_obs_stations_j_1_max__; ++j_1__) {
                vars__.push_back(sigma_entry_obs_stations(j_1__, j_2__));
            }
        }
        std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > theta_vec;
        size_t theta_vec_d_0_max__ = J;
        size_t theta_vec_d_1_max__ = N_before;
        theta_vec.resize(theta_vec_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < theta_vec_d_0_max__; ++d_0__) {
            theta_vec[d_0__].reserve(theta_vec_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < theta_vec_d_1_max__; ++d_1__) {
                theta_vec[d_0__].push_back(in__.vector_constrain((P * K)));
            }
        }
        size_t theta_vec_j_1_max__ = (P * K);
        size_t theta_vec_k_0_max__ = J;
        size_t theta_vec_k_1_max__ = N_before;
        for (size_t j_1__ = 0; j_1__ < theta_vec_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < theta_vec_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < theta_vec_k_0_max__; ++k_0__) {
                    vars__.push_back(theta_vec[k_0__][k_1__](j_1__));
                }
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> theta_vec_cov_matrix = in__.cov_matrix_constrain((P * K));
        size_t theta_vec_cov_matrix_j_2_max__ = (P * K);
        size_t theta_vec_cov_matrix_j_1_max__ = (P * K);
        for (size_t j_2__ = 0; j_2__ < theta_vec_cov_matrix_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_vec_cov_matrix_j_1_max__; ++j_1__) {
                vars__.push_back(theta_vec_cov_matrix(j_1__, j_2__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > kernels;
        size_t kernels_d_0_max__ = J;
        kernels.reserve(kernels_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < kernels_d_0_max__; ++d_0__) {
            kernels.push_back(in__.vector_lub_constrain(coordinates_lower, coordinates_upper, 2));
        }
        size_t kernels_j_1_max__ = 2;
        size_t kernels_k_0_max__ = J;
        for (size_t j_1__ = 0; j_1__ < kernels_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < kernels_k_0_max__; ++k_0__) {
                vars__.push_back(kernels[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> sigma_kernels = in__.cov_matrix_constrain(2);
        size_t sigma_kernels_j_2_max__ = 2;
        size_t sigma_kernels_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < sigma_kernels_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_kernels_j_1_max__; ++j_1__) {
                vars__.push_back(sigma_kernels(j_1__, j_2__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > theta_vec_no_espatial;
        size_t theta_vec_no_espatial_d_0_max__ = N_before;
        theta_vec_no_espatial.reserve(theta_vec_no_espatial_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < theta_vec_no_espatial_d_0_max__; ++d_0__) {
            theta_vec_no_espatial.push_back(in__.vector_constrain((P * K)));
        }
        size_t theta_vec_no_espatial_j_1_max__ = (P * K);
        size_t theta_vec_no_espatial_k_0_max__ = N_before;
        for (size_t j_1__ = 0; j_1__ < theta_vec_no_espatial_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < theta_vec_no_espatial_k_0_max__; ++k_0__) {
                vars__.push_back(theta_vec_no_espatial[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> theta_vec_cov_matrix_no_spatial = in__.cov_matrix_constrain((P * K));
        size_t theta_vec_cov_matrix_no_spatial_j_2_max__ = (P * K);
        size_t theta_vec_cov_matrix_no_spatial_j_1_max__ = (P * K);
        for (size_t j_2__ = 0; j_2__ < theta_vec_cov_matrix_no_spatial_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_vec_cov_matrix_no_spatial_j_1_max__; ++j_1__) {
                vars__.push_back(theta_vec_cov_matrix_no_spatial(j_1__, j_2__));
            }
        }
        double scale_spatial_param = in__.scalar_constrain();
        vars__.push_back(scale_spatial_param);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 88;
            validate_non_negative_index("pi_mixture", "K", K);
            validate_non_negative_index("pi_mixture", "J", J);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > pi_mixture(J, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            stan::math::initialize(pi_mixture, DUMMY_VAR__);
            stan::math::fill(pi_mixture, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 93;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 95;
                for (int k = 1; k <= K; ++k) {
                    current_statement_begin__ = 97;
                    stan::model::assign(pi_mixture, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                                stan::math::exp(multi_normal_log(get_base1(COORDINATES, k, "COORDINATES", 1), get_base1(kernels, j, "kernels", 1), sigma_kernels)), 
                                "assigning variable pi_mixture");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t pi_mixture_j_1_max__ = K;
                size_t pi_mixture_k_0_max__ = J;
                for (size_t j_1__ = 0; j_1__ < pi_mixture_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < pi_mixture_k_0_max__; ++k_0__) {
                        vars__.push_back(pi_mixture[k_0__](j_1__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 112;
            validate_non_negative_index("Y_pred", "K", K);
            validate_non_negative_index("Y_pred", "N", N);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > Y_pred(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            stan::math::initialize(Y_pred, DUMMY_VAR__);
            stan::math::fill(Y_pred, DUMMY_VAR__);
            current_statement_begin__ = 113;
            validate_non_negative_index("theta_vec_pred", "(K * P)", (K * P));
            validate_non_negative_index("theta_vec_pred", "J", J);
            validate_non_negative_index("theta_vec_pred", "N", N);
            std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > theta_vec_pred(J, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>((K * P))));
            stan::math::initialize(theta_vec_pred, DUMMY_VAR__);
            stan::math::fill(theta_vec_pred, DUMMY_VAR__);
            current_statement_begin__ = 114;
            validate_non_negative_index("theta_vec_pred_no_spatial", "(K * P)", (K * P));
            validate_non_negative_index("theta_vec_pred_no_spatial", "N", N);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > theta_vec_pred_no_spatial(N, Eigen::Matrix<double, Eigen::Dynamic, 1>((K * P)));
            stan::math::initialize(theta_vec_pred_no_spatial, DUMMY_VAR__);
            stan::math::fill(theta_vec_pred_no_spatial, DUMMY_VAR__);
            current_statement_begin__ = 115;
            validate_non_negative_index("mu", "K", K);
            validate_non_negative_index("mu", "N", N);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > mu(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 117;
            validate_non_negative_index("difference", "K", K);
            validate_non_negative_index("difference", "N", N);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > difference(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            stan::math::initialize(difference, DUMMY_VAR__);
            stan::math::fill(difference, DUMMY_VAR__);
            current_statement_begin__ = 118;
            validate_non_negative_index("cumsum_difference", "K", K);
            validate_non_negative_index("cumsum_difference", "N", N);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > cumsum_difference(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            stan::math::initialize(cumsum_difference, DUMMY_VAR__);
            stan::math::fill(cumsum_difference, DUMMY_VAR__);
            current_statement_begin__ = 119;
            validate_non_negative_index("cumsum_only_after", "K", K);
            validate_non_negative_index("cumsum_only_after", "N", N);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > cumsum_only_after(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            stan::math::initialize(cumsum_only_after, DUMMY_VAR__);
            stan::math::fill(cumsum_only_after, DUMMY_VAR__);
            current_statement_begin__ = 121;
            validate_non_negative_index("arco_only_after", "K", K);
            validate_non_negative_index("arco_only_after", "N", N);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > arco_only_after(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            stan::math::initialize(arco_only_after, DUMMY_VAR__);
            stan::math::fill(arco_only_after, DUMMY_VAR__);
            current_statement_begin__ = 122;
            validate_non_negative_index("arco_only_after_aggregated", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> arco_only_after_aggregated(N);
            stan::math::initialize(arco_only_after_aggregated, DUMMY_VAR__);
            stan::math::fill(arco_only_after_aggregated, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 125;
            stan::model::assign(Y_pred, 
                        stan::model::cons_list(stan::model::index_min_max(1, N_before), stan::model::nil_index_list()), 
                        stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_min_max(1, N_before), stan::model::nil_index_list()), "Y"), 
                        "assigning variable Y_pred");
            current_statement_begin__ = 128;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 129;
                stan::model::assign(theta_vec_pred, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(1, N_before), stan::model::nil_index_list())), 
                            stan::model::rvalue(theta_vec, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(1, N_before), stan::model::nil_index_list())), "theta_vec"), 
                            "assigning variable theta_vec_pred");
                current_statement_begin__ = 130;
                stan::model::assign(theta_vec_pred, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max((N_before + 1), N), stan::model::nil_index_list())), 
                            stan::model::deep_copy(multi_normal_rng(rep_array(get_base1(get_base1(theta_vec_pred, j, "theta_vec_pred", 1), N_before, "theta_vec_pred", 2), N_after), theta_vec_cov_matrix, base_rng__)), 
                            "assigning variable theta_vec_pred");
            }
            current_statement_begin__ = 134;
            stan::model::assign(theta_vec_pred_no_spatial, 
                        stan::model::cons_list(stan::model::index_min_max(1, N_before), stan::model::nil_index_list()), 
                        stan::model::rvalue(theta_vec_no_espatial, stan::model::cons_list(stan::model::index_min_max(1, N_before), stan::model::nil_index_list()), "theta_vec_no_espatial"), 
                        "assigning variable theta_vec_pred_no_spatial");
            current_statement_begin__ = 135;
            stan::model::assign(theta_vec_pred_no_spatial, 
                        stan::model::cons_list(stan::model::index_min_max((N_before + 1), N), stan::model::nil_index_list()), 
                        stan::model::deep_copy(multi_normal_rng(rep_array(get_base1(theta_vec_pred_no_spatial, N_before, "theta_vec_pred_no_spatial", 1), N_after), theta_vec_cov_matrix_no_spatial, base_rng__)), 
                        "assigning variable theta_vec_pred_no_spatial");
            current_statement_begin__ = 138;
            for (int t = 1; t <= N; ++t) {
                current_statement_begin__ = 140;
                for (int j = 1; j <= J; ++j) {
                    current_statement_begin__ = 142;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                elt_multiply(get_base1(pi_mixture, j, "pi_mixture", 1), multiply(transpose(to_matrix(get_base1(get_base1(theta_vec_pred, j, "theta_vec_pred", 1), t, "theta_vec_pred", 2), P, K)), get_base1(X, t, "X", 1))), 
                                "assigning variable mu");
                }
                current_statement_begin__ = 146;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            add(multiply(scale_spatial_param, get_base1(mu, t, "mu", 1)), multiply(multiply((1 - scale_spatial_param), transpose(to_matrix(get_base1(theta_vec_pred_no_spatial, t, "theta_vec_pred_no_spatial", 1), P, K))), get_base1(X, t, "X", 1))), 
                            "assigning variable mu");
            }
            current_statement_begin__ = 149;
            if (as_bool(use_predefined_stations_var)) {
                current_statement_begin__ = 151;
                stan::math::assign(Y_pred, multi_normal_rng(mu, predefined_stations_var, base_rng__));
            } else {
                current_statement_begin__ = 154;
                stan::math::assign(Y_pred, multi_normal_rng(mu, sigma_entry_obs_stations, base_rng__));
            }
            current_statement_begin__ = 157;
            for (int t = 1; t <= N; ++t) {
                current_statement_begin__ = 158;
                stan::model::assign(difference, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            subtract(get_base1(Y, t, "Y", 1), get_base1(Y_pred, t, "Y_pred", 1)), 
                            "assigning variable difference");
            }
            current_statement_begin__ = 161;
            stan::model::assign(cumsum_only_after, 
                        stan::model::cons_list(stan::model::index_min_max(1, N_before), stan::model::nil_index_list()), 
                        rep_array(rep_vector(0, K), N_before), 
                        "assigning variable cumsum_only_after");
            current_statement_begin__ = 162;
            stan::model::assign(cumsum_only_after, 
                        stan::model::cons_list(stan::model::index_min_max((N_before + 1), N), stan::model::nil_index_list()), 
                        cumsum_vector(stan::model::rvalue(difference, stan::model::cons_list(stan::model::index_min_max((N_before + 1), N), stan::model::nil_index_list()), "difference"), pstream__), 
                        "assigning variable cumsum_only_after");
            current_statement_begin__ = 164;
            stan::math::assign(cumsum_difference, cumsum_vector(difference, pstream__));
            current_statement_begin__ = 167;
            stan::model::assign(arco_only_after, 
                        stan::model::cons_list(stan::model::index_min_max(1, N_before), stan::model::nil_index_list()), 
                        rep_array(rep_vector(0, K), N_before), 
                        "assigning variable arco_only_after");
            current_statement_begin__ = 168;
            stan::model::assign(arco_only_after_aggregated, 
                        stan::model::cons_list(stan::model::index_min_max(1, N_before), stan::model::nil_index_list()), 
                        rep_vector(0, N_before), 
                        "assigning variable arco_only_after_aggregated");
            current_statement_begin__ = 170;
            for (int t = (N_before + 1); t <= N; ++t) {
                current_statement_begin__ = 172;
                stan::model::assign(arco_only_after, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            multiply((1.0 / (t - N_before)), get_base1(cumsum_only_after, t, "cumsum_only_after", 1)), 
                            "assigning variable arco_only_after");
                current_statement_begin__ = 173;
                stan::model::assign(arco_only_after_aggregated, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            mean(get_base1(arco_only_after, t, "arco_only_after", 1)), 
                            "assigning variable arco_only_after_aggregated");
            }
            // validate, write generated quantities
            current_statement_begin__ = 112;
            size_t Y_pred_j_1_max__ = K;
            size_t Y_pred_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < Y_pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < Y_pred_k_0_max__; ++k_0__) {
                    vars__.push_back(Y_pred[k_0__](j_1__));
                }
            }
            current_statement_begin__ = 113;
            size_t theta_vec_pred_j_1_max__ = (K * P);
            size_t theta_vec_pred_k_0_max__ = J;
            size_t theta_vec_pred_k_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < theta_vec_pred_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < theta_vec_pred_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < theta_vec_pred_k_0_max__; ++k_0__) {
                        vars__.push_back(theta_vec_pred[k_0__][k_1__](j_1__));
                    }
                }
            }
            current_statement_begin__ = 114;
            size_t theta_vec_pred_no_spatial_j_1_max__ = (K * P);
            size_t theta_vec_pred_no_spatial_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < theta_vec_pred_no_spatial_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < theta_vec_pred_no_spatial_k_0_max__; ++k_0__) {
                    vars__.push_back(theta_vec_pred_no_spatial[k_0__](j_1__));
                }
            }
            current_statement_begin__ = 115;
            size_t mu_j_1_max__ = K;
            size_t mu_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
                    vars__.push_back(mu[k_0__](j_1__));
                }
            }
            current_statement_begin__ = 117;
            size_t difference_j_1_max__ = K;
            size_t difference_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < difference_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < difference_k_0_max__; ++k_0__) {
                    vars__.push_back(difference[k_0__](j_1__));
                }
            }
            current_statement_begin__ = 118;
            size_t cumsum_difference_j_1_max__ = K;
            size_t cumsum_difference_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < cumsum_difference_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < cumsum_difference_k_0_max__; ++k_0__) {
                    vars__.push_back(cumsum_difference[k_0__](j_1__));
                }
            }
            current_statement_begin__ = 119;
            size_t cumsum_only_after_j_1_max__ = K;
            size_t cumsum_only_after_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < cumsum_only_after_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < cumsum_only_after_k_0_max__; ++k_0__) {
                    vars__.push_back(cumsum_only_after[k_0__](j_1__));
                }
            }
            current_statement_begin__ = 121;
            size_t arco_only_after_j_1_max__ = K;
            size_t arco_only_after_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < arco_only_after_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < arco_only_after_k_0_max__; ++k_0__) {
                    vars__.push_back(arco_only_after[k_0__](j_1__));
                }
            }
            current_statement_begin__ = 122;
            size_t arco_only_after_aggregated_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < arco_only_after_aggregated_j_1_max__; ++j_1__) {
                vars__.push_back(arco_only_after_aggregated(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_model_vector_full_spatial_predict";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t sigma_entry_obs_stations_j_2_max__ = (use_predefined_stations_var ? 0 : K );
        size_t sigma_entry_obs_stations_j_1_max__ = (use_predefined_stations_var ? 0 : K );
        for (size_t j_2__ = 0; j_2__ < sigma_entry_obs_stations_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_entry_obs_stations_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_entry_obs_stations" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t theta_vec_j_1_max__ = (P * K);
        size_t theta_vec_k_0_max__ = J;
        size_t theta_vec_k_1_max__ = N_before;
        for (size_t j_1__ = 0; j_1__ < theta_vec_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < theta_vec_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < theta_vec_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta_vec" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t theta_vec_cov_matrix_j_2_max__ = (P * K);
        size_t theta_vec_cov_matrix_j_1_max__ = (P * K);
        for (size_t j_2__ = 0; j_2__ < theta_vec_cov_matrix_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_vec_cov_matrix_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_vec_cov_matrix" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t kernels_j_1_max__ = 2;
        size_t kernels_k_0_max__ = J;
        for (size_t j_1__ = 0; j_1__ < kernels_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < kernels_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "kernels" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_kernels_j_2_max__ = 2;
        size_t sigma_kernels_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < sigma_kernels_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_kernels_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_kernels" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t theta_vec_no_espatial_j_1_max__ = (P * K);
        size_t theta_vec_no_espatial_k_0_max__ = N_before;
        for (size_t j_1__ = 0; j_1__ < theta_vec_no_espatial_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < theta_vec_no_espatial_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_vec_no_espatial" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t theta_vec_cov_matrix_no_spatial_j_2_max__ = (P * K);
        size_t theta_vec_cov_matrix_no_spatial_j_1_max__ = (P * K);
        for (size_t j_2__ = 0; j_2__ < theta_vec_cov_matrix_no_spatial_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_vec_cov_matrix_no_spatial_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_vec_cov_matrix_no_spatial" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale_spatial_param";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t pi_mixture_j_1_max__ = K;
            size_t pi_mixture_k_0_max__ = J;
            for (size_t j_1__ = 0; j_1__ < pi_mixture_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < pi_mixture_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pi_mixture" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t Y_pred_j_1_max__ = K;
        size_t Y_pred_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Y_pred_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < Y_pred_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Y_pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t theta_vec_pred_j_1_max__ = (K * P);
        size_t theta_vec_pred_k_0_max__ = J;
        size_t theta_vec_pred_k_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < theta_vec_pred_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < theta_vec_pred_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < theta_vec_pred_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta_vec_pred" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t theta_vec_pred_no_spatial_j_1_max__ = (K * P);
        size_t theta_vec_pred_no_spatial_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < theta_vec_pred_no_spatial_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < theta_vec_pred_no_spatial_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_vec_pred_no_spatial" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_j_1_max__ = K;
        size_t mu_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t difference_j_1_max__ = K;
        size_t difference_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < difference_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < difference_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "difference" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t cumsum_difference_j_1_max__ = K;
        size_t cumsum_difference_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < cumsum_difference_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cumsum_difference_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cumsum_difference" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t cumsum_only_after_j_1_max__ = K;
        size_t cumsum_only_after_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < cumsum_only_after_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cumsum_only_after_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cumsum_only_after" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t arco_only_after_j_1_max__ = K;
        size_t arco_only_after_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < arco_only_after_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < arco_only_after_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "arco_only_after" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t arco_only_after_aggregated_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < arco_only_after_aggregated_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "arco_only_after_aggregated" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t sigma_entry_obs_stations_j_1_max__ = ((use_predefined_stations_var ? 0 : K ) + (((use_predefined_stations_var ? 0 : K ) * ((use_predefined_stations_var ? 0 : K ) - 1)) / 2));
        for (size_t j_1__ = 0; j_1__ < sigma_entry_obs_stations_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_entry_obs_stations" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_vec_j_1_max__ = (P * K);
        size_t theta_vec_k_0_max__ = J;
        size_t theta_vec_k_1_max__ = N_before;
        for (size_t j_1__ = 0; j_1__ < theta_vec_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < theta_vec_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < theta_vec_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta_vec" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t theta_vec_cov_matrix_j_1_max__ = ((P * K) + (((P * K) * ((P * K) - 1)) / 2));
        for (size_t j_1__ = 0; j_1__ < theta_vec_cov_matrix_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_vec_cov_matrix" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t kernels_j_1_max__ = 2;
        size_t kernels_k_0_max__ = J;
        for (size_t j_1__ = 0; j_1__ < kernels_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < kernels_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "kernels" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_kernels_j_1_max__ = (2 + ((2 * (2 - 1)) / 2));
        for (size_t j_1__ = 0; j_1__ < sigma_kernels_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_kernels" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_vec_no_espatial_j_1_max__ = (P * K);
        size_t theta_vec_no_espatial_k_0_max__ = N_before;
        for (size_t j_1__ = 0; j_1__ < theta_vec_no_espatial_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < theta_vec_no_espatial_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_vec_no_espatial" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t theta_vec_cov_matrix_no_spatial_j_1_max__ = ((P * K) + (((P * K) * ((P * K) - 1)) / 2));
        for (size_t j_1__ = 0; j_1__ < theta_vec_cov_matrix_no_spatial_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_vec_cov_matrix_no_spatial" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale_spatial_param";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t pi_mixture_j_1_max__ = K;
            size_t pi_mixture_k_0_max__ = J;
            for (size_t j_1__ = 0; j_1__ < pi_mixture_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < pi_mixture_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pi_mixture" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t Y_pred_j_1_max__ = K;
        size_t Y_pred_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Y_pred_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < Y_pred_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Y_pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t theta_vec_pred_j_1_max__ = (K * P);
        size_t theta_vec_pred_k_0_max__ = J;
        size_t theta_vec_pred_k_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < theta_vec_pred_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < theta_vec_pred_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < theta_vec_pred_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta_vec_pred" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t theta_vec_pred_no_spatial_j_1_max__ = (K * P);
        size_t theta_vec_pred_no_spatial_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < theta_vec_pred_no_spatial_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < theta_vec_pred_no_spatial_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_vec_pred_no_spatial" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t mu_j_1_max__ = K;
        size_t mu_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t difference_j_1_max__ = K;
        size_t difference_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < difference_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < difference_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "difference" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t cumsum_difference_j_1_max__ = K;
        size_t cumsum_difference_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < cumsum_difference_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cumsum_difference_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cumsum_difference" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t cumsum_only_after_j_1_max__ = K;
        size_t cumsum_only_after_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < cumsum_only_after_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < cumsum_only_after_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cumsum_only_after" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t arco_only_after_j_1_max__ = K;
        size_t arco_only_after_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < arco_only_after_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < arco_only_after_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "arco_only_after" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t arco_only_after_aggregated_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < arco_only_after_aggregated_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "arco_only_after_aggregated" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_model_vector_full_spatial_predict_namespace::model_model_vector_full_spatial_predict stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
