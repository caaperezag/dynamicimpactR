// Generated by rstantools.  Do not edit by hand.

/*
    dynamicimpact is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    dynamicimpact is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with dynamicimpact.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_model_matrix_predict_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_model_matrix_predict");
    reader.add_event(315, 313, "end", "model_model_matrix_predict");
    return reader;
}
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
kronecker_prod(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& A,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& B, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 7;
        validate_non_negative_index("C", "(rows(A) * rows(B))", (rows(A) * rows(B)));
        validate_non_negative_index("C", "(cols(A) * cols(B))", (cols(A) * cols(B)));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> C((rows(A) * rows(B)), (cols(A) * cols(B)));
        stan::math::initialize(C, DUMMY_VAR__);
        stan::math::fill(C, DUMMY_VAR__);
        stan::math::assign(C,rep_matrix(0.0, (rows(A) * rows(B)), (rows(A) * rows(B))));
        current_statement_begin__ = 8;
        int m(0);
        (void) m;  // dummy to suppress unused var warning
        stan::math::fill(m, std::numeric_limits<int>::min());
        current_statement_begin__ = 9;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        current_statement_begin__ = 10;
        int p(0);
        (void) p;  // dummy to suppress unused var warning
        stan::math::fill(p, std::numeric_limits<int>::min());
        current_statement_begin__ = 11;
        int q(0);
        (void) q;  // dummy to suppress unused var warning
        stan::math::fill(q, std::numeric_limits<int>::min());
        current_statement_begin__ = 13;
        stan::math::assign(m, rows(A));
        current_statement_begin__ = 14;
        stan::math::assign(n, cols(A));
        current_statement_begin__ = 15;
        stan::math::assign(p, rows(B));
        current_statement_begin__ = 16;
        stan::math::assign(q, cols(B));
        current_statement_begin__ = 18;
        if (as_bool((primitive_value(logical_eq(rows(A), 1)) && primitive_value(logical_eq(cols(A), 1))))) {
            current_statement_begin__ = 19;
            return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(get_base1(A, 1, 1, "A", 1), B));
        }
        current_statement_begin__ = 22;
        if (as_bool((primitive_value(logical_eq(rows(B), 1)) && primitive_value(logical_eq(cols(B), 1))))) {
            current_statement_begin__ = 23;
            return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(get_base1(B, 1, 1, "B", 1), A));
        }
        current_statement_begin__ = 26;
        for (int i = 1; i <= m; ++i) {
            current_statement_begin__ = 28;
            for (int j = 1; j <= n; ++j) {
                {
                current_statement_begin__ = 29;
                int row_start(0);
                (void) row_start;  // dummy to suppress unused var warning
                stan::math::fill(row_start, std::numeric_limits<int>::min());
                current_statement_begin__ = 30;
                int row_end(0);
                (void) row_end;  // dummy to suppress unused var warning
                stan::math::fill(row_end, std::numeric_limits<int>::min());
                current_statement_begin__ = 31;
                int col_start(0);
                (void) col_start;  // dummy to suppress unused var warning
                stan::math::fill(col_start, std::numeric_limits<int>::min());
                current_statement_begin__ = 32;
                int col_end(0);
                (void) col_end;  // dummy to suppress unused var warning
                stan::math::fill(col_end, std::numeric_limits<int>::min());
                current_statement_begin__ = 33;
                stan::math::assign(row_start, (((i - 1) * p) + 1));
                current_statement_begin__ = 34;
                stan::math::assign(row_end, (((i - 1) * p) + p));
                current_statement_begin__ = 35;
                stan::math::assign(col_start, (((j - 1) * q) + 1));
                current_statement_begin__ = 36;
                stan::math::assign(col_end, (((j - 1) * q) + q));
                current_statement_begin__ = 37;
                stan::model::assign(C, 
                            stan::model::cons_list(stan::model::index_min_max(row_start, row_end), stan::model::cons_list(stan::model::index_min_max(col_start, col_end), stan::model::nil_index_list())), 
                            multiply(get_base1(A, i, j, "A", 1), B), 
                            "assigning variable C");
                }
            }
        }
        current_statement_begin__ = 42;
        return stan::math::promote_scalar<fun_return_scalar_t__>(C);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct kronecker_prod_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& A,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& B, std::ostream* pstream__) const {
        return kronecker_prod(A, B, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
log_matrix_normal_density(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& y_real,
                              const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& y_est,
                              const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& V,
                              const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& U, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 48;
        local_scalar_t__ det_V(DUMMY_VAR__);
        (void) det_V;  // dummy to suppress unused var warning
        stan::math::initialize(det_V, DUMMY_VAR__);
        stan::math::fill(det_V, DUMMY_VAR__);
        stan::math::assign(det_V,determinant(V));
        current_statement_begin__ = 49;
        local_scalar_t__ det_U(DUMMY_VAR__);
        (void) det_U;  // dummy to suppress unused var warning
        stan::math::initialize(det_U, DUMMY_VAR__);
        stan::math::fill(det_U, DUMMY_VAR__);
        stan::math::assign(det_U,determinant(U));
        current_statement_begin__ = 53;
        validate_non_negative_index("inv_V", "get_base1(dims(V), 1, \"dims(V)\", 1)", get_base1(dims(V), 1, "dims(V)", 1));
        validate_non_negative_index("inv_V", "get_base1(dims(V), 2, \"dims(V)\", 1)", get_base1(dims(V), 2, "dims(V)", 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> inv_V(get_base1(dims(V), 1, "dims(V)", 1), get_base1(dims(V), 2, "dims(V)", 1));
        stan::math::initialize(inv_V, DUMMY_VAR__);
        stan::math::fill(inv_V, DUMMY_VAR__);
        stan::math::assign(inv_V,inverse_spd(V));
        current_statement_begin__ = 54;
        validate_non_negative_index("inv_U", "get_base1(dims(U), 1, \"dims(U)\", 1)", get_base1(dims(U), 1, "dims(U)", 1));
        validate_non_negative_index("inv_U", "get_base1(dims(U), 2, \"dims(U)\", 1)", get_base1(dims(U), 2, "dims(U)", 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> inv_U(get_base1(dims(U), 1, "dims(U)", 1), get_base1(dims(U), 2, "dims(U)", 1));
        stan::math::initialize(inv_U, DUMMY_VAR__);
        stan::math::fill(inv_U, DUMMY_VAR__);
        stan::math::assign(inv_U,inverse_spd(U));
        current_statement_begin__ = 56;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,get_base1(dims(y_real), 1, "dims(y_real)", 1));
        current_statement_begin__ = 57;
        int p(0);
        (void) p;  // dummy to suppress unused var warning
        stan::math::fill(p, std::numeric_limits<int>::min());
        stan::math::assign(p,get_base1(dims(y_real), 2, "dims(y_real)", 1));
        current_statement_begin__ = 60;
        validate_non_negative_index("temp_matrix", "p", p);
        validate_non_negative_index("temp_matrix", "p", p);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> temp_matrix(p, p);
        stan::math::initialize(temp_matrix, DUMMY_VAR__);
        stan::math::fill(temp_matrix, DUMMY_VAR__);
        stan::math::assign(temp_matrix,multiply((-(1) / 2.0), multiply(multiply(multiply(inv_V, transpose(subtract(y_real, y_est))), inv_U), subtract(y_real, y_est))));
        current_statement_begin__ = 63;
        local_scalar_t__ result_value(DUMMY_VAR__);
        (void) result_value;  // dummy to suppress unused var warning
        stan::math::initialize(result_value, DUMMY_VAR__);
        stan::math::fill(result_value, DUMMY_VAR__);
        stan::math::assign(result_value,(((trace(temp_matrix) - stan::math::log(pow((2.0 * stan::math::pi()), (((1.0 * n) * p) / 2.0)))) - stan::math::log(pow(det_V, ((1.0 * n) / 2.0)))) - stan::math::log(pow(det_U, ((1.0 * p) / 2.0)))));
        current_statement_begin__ = 65;
        return stan::math::promote_scalar<fun_return_scalar_t__>(result_value);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct log_matrix_normal_density_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& y_real,
                              const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& y_est,
                              const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& V,
                              const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& U, std::ostream* pstream__) const {
        return log_matrix_normal_density(y_real, y_est, V, U, pstream__);
    }
};
template <typename T0__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic> >
cumsum_matrix(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& input_matrix, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 71;
        validate_non_negative_index("result_matrix", "get_base1(dims(input_matrix), 2, \"dims(input_matrix)\", 1)", get_base1(dims(input_matrix), 2, "dims(input_matrix)", 1));
        validate_non_negative_index("result_matrix", "get_base1(dims(input_matrix), 3, \"dims(input_matrix)\", 1)", get_base1(dims(input_matrix), 3, "dims(input_matrix)", 1));
        validate_non_negative_index("result_matrix", "get_base1(dims(input_matrix), 1, \"dims(input_matrix)\", 1)", get_base1(dims(input_matrix), 1, "dims(input_matrix)", 1));
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > result_matrix(get_base1(dims(input_matrix), 1, "dims(input_matrix)", 1), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(get_base1(dims(input_matrix), 2, "dims(input_matrix)", 1), get_base1(dims(input_matrix), 3, "dims(input_matrix)", 1)));
        stan::math::initialize(result_matrix, DUMMY_VAR__);
        stan::math::fill(result_matrix, DUMMY_VAR__);
        current_statement_begin__ = 73;
        for (int t = 1; t <= get_base1(dims(input_matrix), 1, "dims(input_matrix)", 1); ++t) {
            current_statement_begin__ = 75;
            if (as_bool(logical_eq(t, 1))) {
                current_statement_begin__ = 76;
                stan::model::assign(result_matrix, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            get_base1(input_matrix, t, "input_matrix", 1), 
                            "assigning variable result_matrix");
            } else {
                current_statement_begin__ = 78;
                stan::model::assign(result_matrix, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            add(get_base1(result_matrix, (t - 1), "result_matrix", 1), get_base1(input_matrix, t, "input_matrix", 1)), 
                            "assigning variable result_matrix");
            }
        }
        current_statement_begin__ = 82;
        return stan::math::promote_scalar<fun_return_scalar_t__>(result_matrix);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct cumsum_matrix_functor__ {
    template <typename T0__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic> >& input_matrix, std::ostream* pstream__) const {
        return cumsum_matrix(input_matrix, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_model_matrix_predict
  : public stan::model::model_base_crtp<model_model_matrix_predict> {
private:
        int N;
        int N_before;
        int K;
        int P;
        int R;
        std::vector<matrix_d> y;
        std::vector<matrix_d> X;
        int use_discount_factor;
        int share_stations_var;
        int keep_theta_static_for_prediction;
        int use_predefined_sensors_var;
        matrix_d predefined_sensors_var;
        int use_predefined_stations_var;
        matrix_d predefined_stations_var;
        int N_after;
        std::vector<vector_d> y_vector;
public:
    model_model_matrix_predict(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_model_matrix_predict(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_model_matrix_predict_namespace::model_model_matrix_predict";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 91;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 92;
            context__.validate_dims("data initialization", "N_before", "int", context__.to_vec());
            N_before = int(0);
            vals_i__ = context__.vals_i("N_before");
            pos__ = 0;
            N_before = vals_i__[pos__++];
            current_statement_begin__ = 95;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 96;
            context__.validate_dims("data initialization", "P", "int", context__.to_vec());
            P = int(0);
            vals_i__ = context__.vals_i("P");
            pos__ = 0;
            P = vals_i__[pos__++];
            current_statement_begin__ = 97;
            context__.validate_dims("data initialization", "R", "int", context__.to_vec());
            R = int(0);
            vals_i__ = context__.vals_i("R");
            pos__ = 0;
            R = vals_i__[pos__++];
            current_statement_begin__ = 101;
            validate_non_negative_index("y", "R", R);
            validate_non_negative_index("y", "K", K);
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "matrix_d", context__.to_vec(N,R,K));
            y = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(N, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(R, K));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_2_max__ = K;
            size_t y_j_1_max__ = R;
            size_t y_k_0_max__ = N;
            for (size_t j_2__ = 0; j_2__ < y_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                        y[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                    }
                }
            }
            current_statement_begin__ = 102;
            validate_non_negative_index("X", "R", R);
            validate_non_negative_index("X", "P", P);
            validate_non_negative_index("X", "N", N);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,R,P));
            X = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(N, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(R, P));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = P;
            size_t X_j_1_max__ = R;
            size_t X_k_0_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < X_k_0_max__; ++k_0__) {
                        X[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                    }
                }
            }
            current_statement_begin__ = 107;
            context__.validate_dims("data initialization", "use_discount_factor", "int", context__.to_vec());
            use_discount_factor = int(0);
            vals_i__ = context__.vals_i("use_discount_factor");
            pos__ = 0;
            use_discount_factor = vals_i__[pos__++];
            check_greater_or_equal(function__, "use_discount_factor", use_discount_factor, 0);
            check_less_or_equal(function__, "use_discount_factor", use_discount_factor, 1);
            current_statement_begin__ = 109;
            context__.validate_dims("data initialization", "share_stations_var", "int", context__.to_vec());
            share_stations_var = int(0);
            vals_i__ = context__.vals_i("share_stations_var");
            pos__ = 0;
            share_stations_var = vals_i__[pos__++];
            check_greater_or_equal(function__, "share_stations_var", share_stations_var, 0);
            check_less_or_equal(function__, "share_stations_var", share_stations_var, 1);
            current_statement_begin__ = 111;
            context__.validate_dims("data initialization", "keep_theta_static_for_prediction", "int", context__.to_vec());
            keep_theta_static_for_prediction = int(0);
            vals_i__ = context__.vals_i("keep_theta_static_for_prediction");
            pos__ = 0;
            keep_theta_static_for_prediction = vals_i__[pos__++];
            check_greater_or_equal(function__, "keep_theta_static_for_prediction", keep_theta_static_for_prediction, 0);
            check_less_or_equal(function__, "keep_theta_static_for_prediction", keep_theta_static_for_prediction, 1);
            current_statement_begin__ = 115;
            context__.validate_dims("data initialization", "use_predefined_sensors_var", "int", context__.to_vec());
            use_predefined_sensors_var = int(0);
            vals_i__ = context__.vals_i("use_predefined_sensors_var");
            pos__ = 0;
            use_predefined_sensors_var = vals_i__[pos__++];
            check_greater_or_equal(function__, "use_predefined_sensors_var", use_predefined_sensors_var, 0);
            check_less_or_equal(function__, "use_predefined_sensors_var", use_predefined_sensors_var, 1);
            current_statement_begin__ = 116;
            validate_non_negative_index("predefined_sensors_var", "R", R);
            validate_non_negative_index("predefined_sensors_var", "R", R);
            context__.validate_dims("data initialization", "predefined_sensors_var", "matrix_d", context__.to_vec(R,R));
            predefined_sensors_var = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(R, R);
            vals_r__ = context__.vals_r("predefined_sensors_var");
            pos__ = 0;
            size_t predefined_sensors_var_j_2_max__ = R;
            size_t predefined_sensors_var_j_1_max__ = R;
            for (size_t j_2__ = 0; j_2__ < predefined_sensors_var_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < predefined_sensors_var_j_1_max__; ++j_1__) {
                    predefined_sensors_var(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 119;
            context__.validate_dims("data initialization", "use_predefined_stations_var", "int", context__.to_vec());
            use_predefined_stations_var = int(0);
            vals_i__ = context__.vals_i("use_predefined_stations_var");
            pos__ = 0;
            use_predefined_stations_var = vals_i__[pos__++];
            check_greater_or_equal(function__, "use_predefined_stations_var", use_predefined_stations_var, 0);
            check_less_or_equal(function__, "use_predefined_stations_var", use_predefined_stations_var, 1);
            current_statement_begin__ = 120;
            validate_non_negative_index("predefined_stations_var", "K", K);
            validate_non_negative_index("predefined_stations_var", "K", K);
            context__.validate_dims("data initialization", "predefined_stations_var", "matrix_d", context__.to_vec(K,K));
            predefined_stations_var = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(K, K);
            vals_r__ = context__.vals_r("predefined_stations_var");
            pos__ = 0;
            size_t predefined_stations_var_j_2_max__ = K;
            size_t predefined_stations_var_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < predefined_stations_var_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < predefined_stations_var_j_1_max__; ++j_1__) {
                    predefined_stations_var(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            current_statement_begin__ = 127;
            N_after = int(0);
            stan::math::fill(N_after, std::numeric_limits<int>::min());
            stan::math::assign(N_after,(N - N_before));
            current_statement_begin__ = 129;
            validate_non_negative_index("y_vector", "(R * K)", (R * K));
            validate_non_negative_index("y_vector", "N", N);
            y_vector = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>((R * K)));
            stan::math::fill(y_vector, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 131;
            for (int t = 1; t <= N; ++t) {
                current_statement_begin__ = 132;
                stan::model::assign(y_vector, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            to_vector(get_base1(y, t, "y", 1)), 
                            "assigning variable y_vector");
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 142;
            validate_non_negative_index("sigma_entry_obs_stations", "(use_predefined_stations_var ? 0 : K )", (use_predefined_stations_var ? 0 : K ));
            validate_non_negative_index("sigma_entry_obs_stations", "(use_predefined_stations_var ? 0 : K )", (use_predefined_stations_var ? 0 : K ));
            num_params_r__ += ((use_predefined_stations_var ? 0 : K ) + (((use_predefined_stations_var ? 0 : K ) * ((use_predefined_stations_var ? 0 : K ) - 1)) / 2));
            current_statement_begin__ = 143;
            validate_non_negative_index("sigma_entry_obs_sensores", "(use_predefined_sensors_var ? 0 : R )", (use_predefined_sensors_var ? 0 : R ));
            validate_non_negative_index("sigma_entry_obs_sensores", "(use_predefined_sensors_var ? 0 : R )", (use_predefined_sensors_var ? 0 : R ));
            num_params_r__ += ((use_predefined_sensors_var ? 0 : R ) + (((use_predefined_sensors_var ? 0 : R ) * ((use_predefined_sensors_var ? 0 : R ) - 1)) / 2));
            current_statement_begin__ = 145;
            validate_non_negative_index("level_sigma_variables", "P", P);
            validate_non_negative_index("level_sigma_variables", "P", P);
            num_params_r__ += (P + ((P * (P - 1)) / 2));
            current_statement_begin__ = 148;
            validate_non_negative_index("level_sigma_stations", "(share_stations_var ? 0 : K )", (share_stations_var ? 0 : K ));
            validate_non_negative_index("level_sigma_stations", "(share_stations_var ? 0 : K )", (share_stations_var ? 0 : K ));
            num_params_r__ += ((share_stations_var ? 0 : K ) + (((share_stations_var ? 0 : K ) * ((share_stations_var ? 0 : K ) - 1)) / 2));
            current_statement_begin__ = 151;
            validate_non_negative_index("theta", "(P * K)", (P * K));
            validate_non_negative_index("theta", "N", N);
            num_params_r__ += ((P * K) * N);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_model_matrix_predict() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 142;
        if (!(context__.contains_r("sigma_entry_obs_stations")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_entry_obs_stations missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_entry_obs_stations");
        pos__ = 0U;
        validate_non_negative_index("sigma_entry_obs_stations", "(use_predefined_stations_var ? 0 : K )", (use_predefined_stations_var ? 0 : K ));
        validate_non_negative_index("sigma_entry_obs_stations", "(use_predefined_stations_var ? 0 : K )", (use_predefined_stations_var ? 0 : K ));
        context__.validate_dims("parameter initialization", "sigma_entry_obs_stations", "matrix_d", context__.to_vec((use_predefined_stations_var ? 0 : K ),(use_predefined_stations_var ? 0 : K )));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> sigma_entry_obs_stations((use_predefined_stations_var ? 0 : K ), (use_predefined_stations_var ? 0 : K ));
        size_t sigma_entry_obs_stations_j_2_max__ = (use_predefined_stations_var ? 0 : K );
        size_t sigma_entry_obs_stations_j_1_max__ = (use_predefined_stations_var ? 0 : K );
        for (size_t j_2__ = 0; j_2__ < sigma_entry_obs_stations_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_entry_obs_stations_j_1_max__; ++j_1__) {
                sigma_entry_obs_stations(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cov_matrix_unconstrain(sigma_entry_obs_stations);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_entry_obs_stations: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 143;
        if (!(context__.contains_r("sigma_entry_obs_sensores")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_entry_obs_sensores missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_entry_obs_sensores");
        pos__ = 0U;
        validate_non_negative_index("sigma_entry_obs_sensores", "(use_predefined_sensors_var ? 0 : R )", (use_predefined_sensors_var ? 0 : R ));
        validate_non_negative_index("sigma_entry_obs_sensores", "(use_predefined_sensors_var ? 0 : R )", (use_predefined_sensors_var ? 0 : R ));
        context__.validate_dims("parameter initialization", "sigma_entry_obs_sensores", "matrix_d", context__.to_vec((use_predefined_sensors_var ? 0 : R ),(use_predefined_sensors_var ? 0 : R )));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> sigma_entry_obs_sensores((use_predefined_sensors_var ? 0 : R ), (use_predefined_sensors_var ? 0 : R ));
        size_t sigma_entry_obs_sensores_j_2_max__ = (use_predefined_sensors_var ? 0 : R );
        size_t sigma_entry_obs_sensores_j_1_max__ = (use_predefined_sensors_var ? 0 : R );
        for (size_t j_2__ = 0; j_2__ < sigma_entry_obs_sensores_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_entry_obs_sensores_j_1_max__; ++j_1__) {
                sigma_entry_obs_sensores(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cov_matrix_unconstrain(sigma_entry_obs_sensores);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_entry_obs_sensores: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 145;
        if (!(context__.contains_r("level_sigma_variables")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable level_sigma_variables missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("level_sigma_variables");
        pos__ = 0U;
        validate_non_negative_index("level_sigma_variables", "P", P);
        validate_non_negative_index("level_sigma_variables", "P", P);
        context__.validate_dims("parameter initialization", "level_sigma_variables", "matrix_d", context__.to_vec(P,P));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> level_sigma_variables(P, P);
        size_t level_sigma_variables_j_2_max__ = P;
        size_t level_sigma_variables_j_1_max__ = P;
        for (size_t j_2__ = 0; j_2__ < level_sigma_variables_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < level_sigma_variables_j_1_max__; ++j_1__) {
                level_sigma_variables(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cov_matrix_unconstrain(level_sigma_variables);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable level_sigma_variables: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 148;
        if (!(context__.contains_r("level_sigma_stations")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable level_sigma_stations missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("level_sigma_stations");
        pos__ = 0U;
        validate_non_negative_index("level_sigma_stations", "(share_stations_var ? 0 : K )", (share_stations_var ? 0 : K ));
        validate_non_negative_index("level_sigma_stations", "(share_stations_var ? 0 : K )", (share_stations_var ? 0 : K ));
        context__.validate_dims("parameter initialization", "level_sigma_stations", "matrix_d", context__.to_vec((share_stations_var ? 0 : K ),(share_stations_var ? 0 : K )));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> level_sigma_stations((share_stations_var ? 0 : K ), (share_stations_var ? 0 : K ));
        size_t level_sigma_stations_j_2_max__ = (share_stations_var ? 0 : K );
        size_t level_sigma_stations_j_1_max__ = (share_stations_var ? 0 : K );
        for (size_t j_2__ = 0; j_2__ < level_sigma_stations_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < level_sigma_stations_j_1_max__; ++j_1__) {
                level_sigma_stations(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cov_matrix_unconstrain(level_sigma_stations);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable level_sigma_stations: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 151;
        if (!(context__.contains_r("theta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "(P * K)", (P * K));
        validate_non_negative_index("theta", "N", N);
        context__.validate_dims("parameter initialization", "theta", "vector_d", context__.to_vec(N,(P * K)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > theta(N, Eigen::Matrix<double, Eigen::Dynamic, 1>((P * K)));
        size_t theta_j_1_max__ = (P * K);
        size_t theta_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                theta[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t theta_i_0_max__ = N;
        for (size_t i_0__ = 0; i_0__ < theta_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(theta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 142;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> sigma_entry_obs_stations;
            (void) sigma_entry_obs_stations;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_entry_obs_stations = in__.cov_matrix_constrain((use_predefined_stations_var ? 0 : K ), lp__);
            else
                sigma_entry_obs_stations = in__.cov_matrix_constrain((use_predefined_stations_var ? 0 : K ));
            current_statement_begin__ = 143;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> sigma_entry_obs_sensores;
            (void) sigma_entry_obs_sensores;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_entry_obs_sensores = in__.cov_matrix_constrain((use_predefined_sensors_var ? 0 : R ), lp__);
            else
                sigma_entry_obs_sensores = in__.cov_matrix_constrain((use_predefined_sensors_var ? 0 : R ));
            current_statement_begin__ = 145;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> level_sigma_variables;
            (void) level_sigma_variables;  // dummy to suppress unused var warning
            if (jacobian__)
                level_sigma_variables = in__.cov_matrix_constrain(P, lp__);
            else
                level_sigma_variables = in__.cov_matrix_constrain(P);
            current_statement_begin__ = 148;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> level_sigma_stations;
            (void) level_sigma_stations;  // dummy to suppress unused var warning
            if (jacobian__)
                level_sigma_stations = in__.cov_matrix_constrain((share_stations_var ? 0 : K ), lp__);
            else
                level_sigma_stations = in__.cov_matrix_constrain((share_stations_var ? 0 : K ));
            current_statement_begin__ = 151;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > theta;
            size_t theta_d_0_max__ = N;
            theta.reserve(theta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < theta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    theta.push_back(in__.vector_constrain((P * K), lp__));
                else
                    theta.push_back(in__.vector_constrain((P * K)));
            }
            // model body
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma_entry_obs_stations");
        names__.push_back("sigma_entry_obs_sensores");
        names__.push_back("level_sigma_variables");
        names__.push_back("level_sigma_stations");
        names__.push_back("theta");
        names__.push_back("mu");
        names__.push_back("Y_pred");
        names__.push_back("theta_pred");
        names__.push_back("mu_pred");
        names__.push_back("difference");
        names__.push_back("cumsum_difference");
        names__.push_back("cumsum_only_after");
        names__.push_back("arco_only_after");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((use_predefined_stations_var ? 0 : K ));
        dims__.push_back((use_predefined_stations_var ? 0 : K ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((use_predefined_sensors_var ? 0 : R ));
        dims__.push_back((use_predefined_sensors_var ? 0 : R ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((share_stations_var ? 0 : K ));
        dims__.push_back((share_stations_var ? 0 : K ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back((P * K));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_before);
        dims__.push_back((R * K));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(R);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(P);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(R);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(R);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(R);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(R);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(R);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_model_matrix_predict_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> sigma_entry_obs_stations = in__.cov_matrix_constrain((use_predefined_stations_var ? 0 : K ));
        size_t sigma_entry_obs_stations_j_2_max__ = (use_predefined_stations_var ? 0 : K );
        size_t sigma_entry_obs_stations_j_1_max__ = (use_predefined_stations_var ? 0 : K );
        for (size_t j_2__ = 0; j_2__ < sigma_entry_obs_stations_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_entry_obs_stations_j_1_max__; ++j_1__) {
                vars__.push_back(sigma_entry_obs_stations(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> sigma_entry_obs_sensores = in__.cov_matrix_constrain((use_predefined_sensors_var ? 0 : R ));
        size_t sigma_entry_obs_sensores_j_2_max__ = (use_predefined_sensors_var ? 0 : R );
        size_t sigma_entry_obs_sensores_j_1_max__ = (use_predefined_sensors_var ? 0 : R );
        for (size_t j_2__ = 0; j_2__ < sigma_entry_obs_sensores_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_entry_obs_sensores_j_1_max__; ++j_1__) {
                vars__.push_back(sigma_entry_obs_sensores(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> level_sigma_variables = in__.cov_matrix_constrain(P);
        size_t level_sigma_variables_j_2_max__ = P;
        size_t level_sigma_variables_j_1_max__ = P;
        for (size_t j_2__ = 0; j_2__ < level_sigma_variables_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < level_sigma_variables_j_1_max__; ++j_1__) {
                vars__.push_back(level_sigma_variables(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> level_sigma_stations = in__.cov_matrix_constrain((share_stations_var ? 0 : K ));
        size_t level_sigma_stations_j_2_max__ = (share_stations_var ? 0 : K );
        size_t level_sigma_stations_j_1_max__ = (share_stations_var ? 0 : K );
        for (size_t j_2__ = 0; j_2__ < level_sigma_stations_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < level_sigma_stations_j_1_max__; ++j_1__) {
                vars__.push_back(level_sigma_stations(j_1__, j_2__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > theta;
        size_t theta_d_0_max__ = N;
        theta.reserve(theta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < theta_d_0_max__; ++d_0__) {
            theta.push_back(in__.vector_constrain((P * K)));
        }
        size_t theta_j_1_max__ = (P * K);
        size_t theta_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                vars__.push_back(theta[k_0__](j_1__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 167;
            validate_non_negative_index("mu", "(R * K)", (R * K));
            validate_non_negative_index("mu", "N_before", N_before);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > mu(N_before, Eigen::Matrix<double, Eigen::Dynamic, 1>((R * K)));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 171;
            validate_non_negative_index("Y_pred", "R", R);
            validate_non_negative_index("Y_pred", "K", K);
            validate_non_negative_index("Y_pred", "N", N);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > Y_pred(N, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(R, K));
            stan::math::initialize(Y_pred, DUMMY_VAR__);
            stan::math::fill(Y_pred, DUMMY_VAR__);
            current_statement_begin__ = 172;
            validate_non_negative_index("theta_pred", "P", P);
            validate_non_negative_index("theta_pred", "K", K);
            validate_non_negative_index("theta_pred", "N", N);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > theta_pred(N, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(P, K));
            stan::math::initialize(theta_pred, DUMMY_VAR__);
            stan::math::fill(theta_pred, DUMMY_VAR__);
            current_statement_begin__ = 173;
            validate_non_negative_index("mu_pred", "R", R);
            validate_non_negative_index("mu_pred", "K", K);
            validate_non_negative_index("mu_pred", "N", N);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > mu_pred(N, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(R, K));
            stan::math::initialize(mu_pred, DUMMY_VAR__);
            stan::math::fill(mu_pred, DUMMY_VAR__);
            current_statement_begin__ = 174;
            validate_non_negative_index("difference", "R", R);
            validate_non_negative_index("difference", "K", K);
            validate_non_negative_index("difference", "N", N);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > difference(N, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(R, K));
            stan::math::initialize(difference, DUMMY_VAR__);
            stan::math::fill(difference, DUMMY_VAR__);
            current_statement_begin__ = 175;
            validate_non_negative_index("cumsum_difference", "R", R);
            validate_non_negative_index("cumsum_difference", "K", K);
            validate_non_negative_index("cumsum_difference", "N", N);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > cumsum_difference(N, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(R, K));
            stan::math::initialize(cumsum_difference, DUMMY_VAR__);
            stan::math::fill(cumsum_difference, DUMMY_VAR__);
            current_statement_begin__ = 176;
            validate_non_negative_index("cumsum_only_after", "R", R);
            validate_non_negative_index("cumsum_only_after", "K", K);
            validate_non_negative_index("cumsum_only_after", "N", N);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > cumsum_only_after(N, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(R, K));
            stan::math::initialize(cumsum_only_after, DUMMY_VAR__);
            stan::math::fill(cumsum_only_after, DUMMY_VAR__);
            current_statement_begin__ = 179;
            validate_non_negative_index("arco_only_after", "R", R);
            validate_non_negative_index("arco_only_after", "K", K);
            validate_non_negative_index("arco_only_after", "N", N);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > arco_only_after(N, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(R, K));
            stan::math::initialize(arco_only_after, DUMMY_VAR__);
            stan::math::fill(arco_only_after, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 187;
            stan::model::assign(mu, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        to_vector(multiply(get_base1(X, 1, "X", 1), to_matrix(get_base1(theta, 1, "theta", 1), P, K))), 
                        "assigning variable mu");
            current_statement_begin__ = 190;
            for (int t = 2; t <= N_before; ++t) {
                current_statement_begin__ = 192;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            to_vector(multiply(get_base1(X, t, "X", 1), to_matrix(get_base1(theta, t, "theta", 1), P, K))), 
                            "assigning variable mu");
            }
            current_statement_begin__ = 198;
            for (int t = 1; t <= N_before; ++t) {
                current_statement_begin__ = 200;
                stan::model::assign(theta_pred, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            to_matrix(get_base1(theta, t, "theta", 1), P, K), 
                            "assigning variable theta_pred");
                current_statement_begin__ = 202;
                stan::model::assign(mu_pred, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            to_matrix(get_base1(mu, t, "mu", 1), R, K), 
                            "assigning variable mu_pred");
                current_statement_begin__ = 206;
                if (as_bool(use_predefined_sensors_var)) {
                    current_statement_begin__ = 208;
                    if (as_bool(use_predefined_stations_var)) {
                        current_statement_begin__ = 210;
                        stan::model::assign(Y_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    to_matrix(multi_normal_rng(to_vector(get_base1(mu_pred, t, "mu_pred", 1)), kronecker_prod(predefined_stations_var, predefined_sensors_var, pstream__), base_rng__), R, K), 
                                    "assigning variable Y_pred");
                    } else {
                        current_statement_begin__ = 214;
                        stan::model::assign(Y_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    to_matrix(multi_normal_rng(to_vector(get_base1(mu_pred, t, "mu_pred", 1)), kronecker_prod(sigma_entry_obs_stations, predefined_sensors_var, pstream__), base_rng__), R, K), 
                                    "assigning variable Y_pred");
                    }
                } else {
                    current_statement_begin__ = 221;
                    if (as_bool(use_predefined_stations_var)) {
                        current_statement_begin__ = 223;
                        stan::model::assign(Y_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    to_matrix(multi_normal_rng(to_vector(get_base1(mu_pred, t, "mu_pred", 1)), kronecker_prod(predefined_stations_var, sigma_entry_obs_sensores, pstream__), base_rng__), R, K), 
                                    "assigning variable Y_pred");
                    } else {
                        current_statement_begin__ = 227;
                        stan::model::assign(Y_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    to_matrix(multi_normal_rng(to_vector(get_base1(mu_pred, t, "mu_pred", 1)), kronecker_prod(sigma_entry_obs_stations, sigma_entry_obs_sensores, pstream__), base_rng__), R, K), 
                                    "assigning variable Y_pred");
                    }
                }
                current_statement_begin__ = 234;
                stan::model::assign(difference, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            subtract(get_base1(y, t, "y", 1), get_base1(Y_pred, t, "Y_pred", 1)), 
                            "assigning variable difference");
                current_statement_begin__ = 236;
                stan::model::assign(cumsum_only_after, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            to_matrix(rep_vector(0, (R * K)), R, K), 
                            "assigning variable cumsum_only_after");
            }
            current_statement_begin__ = 240;
            for (int t = (N_before + 1); t <= N; ++t) {
                current_statement_begin__ = 243;
                if (as_bool(keep_theta_static_for_prediction)) {
                    current_statement_begin__ = 246;
                    stan::model::assign(theta_pred, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                get_base1(theta_pred, N_before, "theta_pred", 1), 
                                "assigning variable theta_pred");
                } else {
                    current_statement_begin__ = 250;
                    if (as_bool(share_stations_var)) {
                        current_statement_begin__ = 252;
                        if (as_bool(use_predefined_stations_var)) {
                            current_statement_begin__ = 254;
                            stan::model::assign(theta_pred, 
                                        stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                        to_matrix(multi_normal_rng(to_vector(get_base1(theta_pred, (t - 1), "theta_pred", 1)), kronecker_prod(predefined_stations_var, level_sigma_variables, pstream__), base_rng__), P, K), 
                                        "assigning variable theta_pred");
                        } else {
                            current_statement_begin__ = 258;
                            stan::model::assign(theta_pred, 
                                        stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                        to_matrix(multi_normal_rng(to_vector(get_base1(theta_pred, (t - 1), "theta_pred", 1)), kronecker_prod(sigma_entry_obs_stations, level_sigma_variables, pstream__), base_rng__), P, K), 
                                        "assigning variable theta_pred");
                        }
                    } else {
                        current_statement_begin__ = 264;
                        stan::model::assign(theta_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    to_matrix(multi_normal_rng(to_vector(get_base1(theta_pred, (t - 1), "theta_pred", 1)), kronecker_prod(level_sigma_stations, level_sigma_variables, pstream__), base_rng__), P, K), 
                                    "assigning variable theta_pred");
                    }
                }
                current_statement_begin__ = 268;
                stan::model::assign(mu_pred, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            multiply(get_base1(X, t, "X", 1), get_base1(theta_pred, t, "theta_pred", 1)), 
                            "assigning variable mu_pred");
                current_statement_begin__ = 271;
                if (as_bool(use_predefined_sensors_var)) {
                    current_statement_begin__ = 273;
                    if (as_bool(use_predefined_stations_var)) {
                        current_statement_begin__ = 275;
                        stan::model::assign(Y_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    to_matrix(multi_normal_rng(to_vector(get_base1(mu_pred, t, "mu_pred", 1)), kronecker_prod(predefined_stations_var, predefined_sensors_var, pstream__), base_rng__), R, K), 
                                    "assigning variable Y_pred");
                    } else {
                        current_statement_begin__ = 279;
                        stan::model::assign(Y_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    to_matrix(multi_normal_rng(to_vector(get_base1(mu_pred, t, "mu_pred", 1)), kronecker_prod(sigma_entry_obs_stations, predefined_sensors_var, pstream__), base_rng__), R, K), 
                                    "assigning variable Y_pred");
                    }
                } else {
                    current_statement_begin__ = 285;
                    if (as_bool(use_predefined_stations_var)) {
                        current_statement_begin__ = 287;
                        stan::model::assign(Y_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    to_matrix(multi_normal_rng(to_vector(get_base1(mu_pred, t, "mu_pred", 1)), kronecker_prod(predefined_stations_var, sigma_entry_obs_sensores, pstream__), base_rng__), R, K), 
                                    "assigning variable Y_pred");
                    } else {
                        current_statement_begin__ = 291;
                        stan::model::assign(Y_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    to_matrix(multi_normal_rng(to_vector(get_base1(mu_pred, t, "mu_pred", 1)), kronecker_prod(sigma_entry_obs_stations, sigma_entry_obs_sensores, pstream__), base_rng__), R, K), 
                                    "assigning variable Y_pred");
                    }
                }
                current_statement_begin__ = 298;
                stan::model::assign(difference, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            subtract(get_base1(y, t, "y", 1), get_base1(Y_pred, t, "Y_pred", 1)), 
                            "assigning variable difference");
            }
            current_statement_begin__ = 303;
            stan::math::assign(cumsum_difference, cumsum_matrix(difference, pstream__));
            current_statement_begin__ = 304;
            stan::model::assign(cumsum_only_after, 
                        stan::model::cons_list(stan::model::index_min_max((N_before + 1), N), stan::model::nil_index_list()), 
                        cumsum_matrix(stan::model::rvalue(difference, stan::model::cons_list(stan::model::index_min_max((N_before + 1), N), stan::model::nil_index_list()), "difference"), pstream__), 
                        "assigning variable cumsum_only_after");
            current_statement_begin__ = 307;
            for (int t = (N_before + 1); t <= N; ++t) {
                current_statement_begin__ = 309;
                stan::model::assign(arco_only_after, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            multiply((1.0 / (t - N_before)), get_base1(cumsum_only_after, t, "cumsum_only_after", 1)), 
                            "assigning variable arco_only_after");
            }
            // validate, write generated quantities
            current_statement_begin__ = 167;
            size_t mu_j_1_max__ = (R * K);
            size_t mu_k_0_max__ = N_before;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
                    vars__.push_back(mu[k_0__](j_1__));
                }
            }
            current_statement_begin__ = 171;
            size_t Y_pred_j_2_max__ = K;
            size_t Y_pred_j_1_max__ = R;
            size_t Y_pred_k_0_max__ = N;
            for (size_t j_2__ = 0; j_2__ < Y_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Y_pred_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < Y_pred_k_0_max__; ++k_0__) {
                        vars__.push_back(Y_pred[k_0__](j_1__, j_2__));
                    }
                }
            }
            current_statement_begin__ = 172;
            size_t theta_pred_j_2_max__ = K;
            size_t theta_pred_j_1_max__ = P;
            size_t theta_pred_k_0_max__ = N;
            for (size_t j_2__ = 0; j_2__ < theta_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < theta_pred_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < theta_pred_k_0_max__; ++k_0__) {
                        vars__.push_back(theta_pred[k_0__](j_1__, j_2__));
                    }
                }
            }
            current_statement_begin__ = 173;
            size_t mu_pred_j_2_max__ = K;
            size_t mu_pred_j_1_max__ = R;
            size_t mu_pred_k_0_max__ = N;
            for (size_t j_2__ = 0; j_2__ < mu_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu_pred_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < mu_pred_k_0_max__; ++k_0__) {
                        vars__.push_back(mu_pred[k_0__](j_1__, j_2__));
                    }
                }
            }
            current_statement_begin__ = 174;
            size_t difference_j_2_max__ = K;
            size_t difference_j_1_max__ = R;
            size_t difference_k_0_max__ = N;
            for (size_t j_2__ = 0; j_2__ < difference_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < difference_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < difference_k_0_max__; ++k_0__) {
                        vars__.push_back(difference[k_0__](j_1__, j_2__));
                    }
                }
            }
            current_statement_begin__ = 175;
            size_t cumsum_difference_j_2_max__ = K;
            size_t cumsum_difference_j_1_max__ = R;
            size_t cumsum_difference_k_0_max__ = N;
            for (size_t j_2__ = 0; j_2__ < cumsum_difference_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < cumsum_difference_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < cumsum_difference_k_0_max__; ++k_0__) {
                        vars__.push_back(cumsum_difference[k_0__](j_1__, j_2__));
                    }
                }
            }
            current_statement_begin__ = 176;
            size_t cumsum_only_after_j_2_max__ = K;
            size_t cumsum_only_after_j_1_max__ = R;
            size_t cumsum_only_after_k_0_max__ = N;
            for (size_t j_2__ = 0; j_2__ < cumsum_only_after_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < cumsum_only_after_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < cumsum_only_after_k_0_max__; ++k_0__) {
                        vars__.push_back(cumsum_only_after[k_0__](j_1__, j_2__));
                    }
                }
            }
            current_statement_begin__ = 179;
            size_t arco_only_after_j_2_max__ = K;
            size_t arco_only_after_j_1_max__ = R;
            size_t arco_only_after_k_0_max__ = N;
            for (size_t j_2__ = 0; j_2__ < arco_only_after_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < arco_only_after_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < arco_only_after_k_0_max__; ++k_0__) {
                        vars__.push_back(arco_only_after[k_0__](j_1__, j_2__));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_model_matrix_predict";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t sigma_entry_obs_stations_j_2_max__ = (use_predefined_stations_var ? 0 : K );
        size_t sigma_entry_obs_stations_j_1_max__ = (use_predefined_stations_var ? 0 : K );
        for (size_t j_2__ = 0; j_2__ < sigma_entry_obs_stations_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_entry_obs_stations_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_entry_obs_stations" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_entry_obs_sensores_j_2_max__ = (use_predefined_sensors_var ? 0 : R );
        size_t sigma_entry_obs_sensores_j_1_max__ = (use_predefined_sensors_var ? 0 : R );
        for (size_t j_2__ = 0; j_2__ < sigma_entry_obs_sensores_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < sigma_entry_obs_sensores_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_entry_obs_sensores" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t level_sigma_variables_j_2_max__ = P;
        size_t level_sigma_variables_j_1_max__ = P;
        for (size_t j_2__ = 0; j_2__ < level_sigma_variables_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < level_sigma_variables_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "level_sigma_variables" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t level_sigma_stations_j_2_max__ = (share_stations_var ? 0 : K );
        size_t level_sigma_stations_j_1_max__ = (share_stations_var ? 0 : K );
        for (size_t j_2__ = 0; j_2__ < level_sigma_stations_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < level_sigma_stations_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "level_sigma_stations" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t theta_j_1_max__ = (P * K);
        size_t theta_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t mu_j_1_max__ = (R * K);
        size_t mu_k_0_max__ = N_before;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Y_pred_j_2_max__ = K;
        size_t Y_pred_j_1_max__ = R;
        size_t Y_pred_k_0_max__ = N;
        for (size_t j_2__ = 0; j_2__ < Y_pred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Y_pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < Y_pred_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Y_pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t theta_pred_j_2_max__ = K;
        size_t theta_pred_j_1_max__ = P;
        size_t theta_pred_k_0_max__ = N;
        for (size_t j_2__ = 0; j_2__ < theta_pred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < theta_pred_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta_pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t mu_pred_j_2_max__ = K;
        size_t mu_pred_j_1_max__ = R;
        size_t mu_pred_k_0_max__ = N;
        for (size_t j_2__ = 0; j_2__ < mu_pred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < mu_pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < mu_pred_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu_pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t difference_j_2_max__ = K;
        size_t difference_j_1_max__ = R;
        size_t difference_k_0_max__ = N;
        for (size_t j_2__ = 0; j_2__ < difference_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < difference_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < difference_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "difference" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t cumsum_difference_j_2_max__ = K;
        size_t cumsum_difference_j_1_max__ = R;
        size_t cumsum_difference_k_0_max__ = N;
        for (size_t j_2__ = 0; j_2__ < cumsum_difference_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < cumsum_difference_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < cumsum_difference_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "cumsum_difference" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t cumsum_only_after_j_2_max__ = K;
        size_t cumsum_only_after_j_1_max__ = R;
        size_t cumsum_only_after_k_0_max__ = N;
        for (size_t j_2__ = 0; j_2__ < cumsum_only_after_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < cumsum_only_after_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < cumsum_only_after_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "cumsum_only_after" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t arco_only_after_j_2_max__ = K;
        size_t arco_only_after_j_1_max__ = R;
        size_t arco_only_after_k_0_max__ = N;
        for (size_t j_2__ = 0; j_2__ < arco_only_after_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < arco_only_after_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < arco_only_after_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "arco_only_after" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t sigma_entry_obs_stations_j_1_max__ = ((use_predefined_stations_var ? 0 : K ) + (((use_predefined_stations_var ? 0 : K ) * ((use_predefined_stations_var ? 0 : K ) - 1)) / 2));
        for (size_t j_1__ = 0; j_1__ < sigma_entry_obs_stations_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_entry_obs_stations" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_entry_obs_sensores_j_1_max__ = ((use_predefined_sensors_var ? 0 : R ) + (((use_predefined_sensors_var ? 0 : R ) * ((use_predefined_sensors_var ? 0 : R ) - 1)) / 2));
        for (size_t j_1__ = 0; j_1__ < sigma_entry_obs_sensores_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_entry_obs_sensores" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t level_sigma_variables_j_1_max__ = (P + ((P * (P - 1)) / 2));
        for (size_t j_1__ = 0; j_1__ < level_sigma_variables_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "level_sigma_variables" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t level_sigma_stations_j_1_max__ = ((share_stations_var ? 0 : K ) + (((share_stations_var ? 0 : K ) * ((share_stations_var ? 0 : K ) - 1)) / 2));
        for (size_t j_1__ = 0; j_1__ < level_sigma_stations_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "level_sigma_stations" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_j_1_max__ = (P * K);
        size_t theta_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t mu_j_1_max__ = (R * K);
        size_t mu_k_0_max__ = N_before;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Y_pred_j_2_max__ = K;
        size_t Y_pred_j_1_max__ = R;
        size_t Y_pred_k_0_max__ = N;
        for (size_t j_2__ = 0; j_2__ < Y_pred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Y_pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < Y_pred_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Y_pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t theta_pred_j_2_max__ = K;
        size_t theta_pred_j_1_max__ = P;
        size_t theta_pred_k_0_max__ = N;
        for (size_t j_2__ = 0; j_2__ < theta_pred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < theta_pred_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta_pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t mu_pred_j_2_max__ = K;
        size_t mu_pred_j_1_max__ = R;
        size_t mu_pred_k_0_max__ = N;
        for (size_t j_2__ = 0; j_2__ < mu_pred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < mu_pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < mu_pred_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu_pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t difference_j_2_max__ = K;
        size_t difference_j_1_max__ = R;
        size_t difference_k_0_max__ = N;
        for (size_t j_2__ = 0; j_2__ < difference_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < difference_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < difference_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "difference" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t cumsum_difference_j_2_max__ = K;
        size_t cumsum_difference_j_1_max__ = R;
        size_t cumsum_difference_k_0_max__ = N;
        for (size_t j_2__ = 0; j_2__ < cumsum_difference_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < cumsum_difference_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < cumsum_difference_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "cumsum_difference" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t cumsum_only_after_j_2_max__ = K;
        size_t cumsum_only_after_j_1_max__ = R;
        size_t cumsum_only_after_k_0_max__ = N;
        for (size_t j_2__ = 0; j_2__ < cumsum_only_after_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < cumsum_only_after_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < cumsum_only_after_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "cumsum_only_after" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t arco_only_after_j_2_max__ = K;
        size_t arco_only_after_j_1_max__ = R;
        size_t arco_only_after_k_0_max__ = N;
        for (size_t j_2__ = 0; j_2__ < arco_only_after_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < arco_only_after_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < arco_only_after_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "arco_only_after" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
    }
}; // model
}  // namespace
typedef model_model_matrix_predict_namespace::model_model_matrix_predict stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
